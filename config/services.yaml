# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    # This parameter defines the codes of the locales (languages) enabled in the application
    #    app_locales: ar|en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN|bg|tr|lt
    app.locales: en|pt_BR
    app.notifications.email_sender: contact@ufit.io
    routing.uuid: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'

    facebook.app_id: '%env(FACEBOOK_APP_ID)%'
    facebook.app_secret: '%env(FACEBOOK_APP_SECRET)%'

    instagram.app_id: '%env(INSTAGRAM_APP_ID)%'
    instagram.app_secret: '%env(INSTAGRAM_APP_SECRET)%'
    instagram.redirect_uri: '%env(INSTAGRAM_REDIRECT_URI)%'

    pagarme.api_key: '%env(PAGARME_API_KEY)%'
    pagarme.postback_url: '%env(PAGARME_POSTBACK_URL)%'

    aws.s3_region: '%env(AWS_S3_REGION)%'
    #aws.s3_access_key_id: '%env(AWS_ACCESS_KEY_ID)%'
    #aws.s3_access_key_secret: '%env(AWS_SECRET_ACCESS_KEY)%'
    s3.buckets.customer_photo: '%env(S3_BUCKET_CUSTOMER_PHOTO)%'
    s3.buckets.vendor_photo: '%env(S3_BUCKET_VENDOR_PHOTO)%'
    s3.buckets.program_asset: '%env(S3_BUCKET_PROGRAM_ASSET)%'

    customer.password_reset_url: '%env(CUSTOMER_PASSWORD_RESET_URL)%'
    vendor.password_reset_url: '%env(VENDOR_PASSWORD_RESET_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            $locales: '%app.locales%'
            $defaultLocale: '%locale%'
            $emailSender: '%app.notifications.email_sender%'
            $customerPhotoS3Bucket: '%s3.buckets.customer_photo%'
            $customerPhotoFileSystem: '@customerPhotoFileSystem'
            $vendorPhotoS3Bucket: '%s3.buckets.vendor_photo%'
            $vendorPhotoFileSystem: '@vendorPhotoFileSystem'
            $programAssetS3Bucket: '%s3.buckets.program_asset%'
            $programAssetFileSystem: '@programAssetFileSystem'
            $eventDispatcher: '@event_dispatcher'
            $customerPasswordResetUrl: '%customer.password_reset_url%'
            $vendorPasswordResetUrl: '%vendor.password_reset_url%'
            $pagarmePostbackUrl: '%pagarme.postback_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    App\Core\:
        resource: '../src/Core/*'
        exclude: '../src/Core/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Core\Controller\:
        resource: '../src/Core/Controller'
        tags: ['controller.service_arguments']

    App\Customer\:
        resource: '../src/Customer/*'
        exclude: '../src/Customer/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Customer\Controller\:
        resource: '../src/Customer/Controller'
        tags: ['controller.service_arguments']

    App\Localization\:
        resource: '../src/Localization/*'
        exclude: '../src/Localization/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Localization\Controller\:
        resource: '../src/Localization/Controller'
        tags: ['controller.service_arguments']

    App\Payment\:
        resource: '../src/Payment/*'
        exclude: '../src/Payment/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Payment\Controller\:
        resource: '../src/Payment/Controller'
        tags: ['controller.service_arguments']

    App\Program\:
        resource: '../src/Program/*'
        exclude: '../src/Program/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Program\Controller\:
        resource: '../src/Program/Controller'
        tags: ['controller.service_arguments']

    App\Subscription\:
        resource: '../src/Subscription/*'
        exclude: '../src/Subscription/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Subscription\Controller\:
        resource: '../src/Subscription/Controller'
        tags: ['controller.service_arguments']

    App\Vendor\:
        resource: '../src/Vendor/*'
        exclude: '../src/Vendor/{DependencyInjection,Entity,Tests,Kernel.php}'

    App\Vendor\Controller\:
        resource: '../src/Vendor/Controller'
        tags: ['controller.service_arguments']

    App\Core\ArgumentResolver\UuidValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 500 }

    App\Core\ParamConverter\QueryStringConverter:
        tags:
            - { name: request.param_converter, converter: querystring }

    App\Core\Twig\MailtoExtension:
        tags: ['twig.extension']

    Aws\S3\S3Client:
        arguments:
            -
                version: '2006-03-01'
                region: '%aws.s3_region%'
#                credentials:
#                    key: '%aws.s3_access_key_id%'
#                    secret: '%aws.s3_access_key_secret%'

    Facebook\Facebook:
        arguments:
            -
                app_id: '%facebook.app_id%'
                app_secret: '%facebook.app_secret%'
                default_graph_version: 'v2.10'

    EspressoDev\InstagramBasicDisplay\InstagramBasicDisplay:
        arguments:
            -
                appId: '%instagram.app_id%'
                appSecret: '%instagram.app_secret%'
                redirectUri: '%instagram.redirect_uri%'

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class:  App\Core\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@gesdinet.jwtrefreshtoken.object_manager', '%gesdinet.jwtrefreshtoken.refresh_token.class%' ]

    Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken: '@gesdinet.jwtrefreshtoken'

    instagram_scrapper.http_client:
        class: GuzzleHttp\Client

    InstagramScraper\Instagram:
        class: InstagramScraper\Instagram
        arguments:
            -
                '@instagram_scrapper.http_client'

    PagarMe\Client:
        class: PagarMe\Client
        arguments:
            -
                '%pagarme.api_key%'

    _instanceof:
        App\Payment\Service\PaymentProcessor\PaymentProcessorInterface:
            tags: ['app.payment.processor']

    App\Payment\Service\PaymentProcessorFactory:
        arguments:
            - !tagged_iterator app.payment.processor

    GeoIp2\Database\Reader:
        arguments:
            $filename: '%kernel.project_dir%/config/geoip/GeoLite2-Country.mmdb'
            $locales: [ 'en' ]