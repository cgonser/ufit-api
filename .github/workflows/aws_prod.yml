on:
    release:
        types:
            - published

name: Build and Deploy to Production


jobs:
    build:
        name: Build Image
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.UFIT_AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.UFIT_AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-central-1

            -   name: Set up Docker Buildx
                id: buildx
                uses: docker/setup-buildx-action@master

            -   name: Cache Docker layers
                uses: actions/cache@v2
                with:
                    path: /tmp/.buildx-cache
                    key: ${{ runner.os }}-buildx-${{ github.sha }}
                    restore-keys: |
                        ${{ runner.os }}-buildx-

            -   name: Build image
                id: docker_build
                uses: docker/build-push-action@v2
                with:
                    context: ./
                    file: ./Dockerfile
                    builder: ${{ steps.buildx.outputs.name }}
                    cache-from: type=local,src=/tmp/.buildx-cache
                    cache-to: type=local,dest=/tmp/.buildx-cache
                    tags: api:latest
                    outputs: type=docker,dest=/tmp/api-latest.tar

            -   name: Upload artifact
                uses: actions/upload-artifact@v2
                with:
                    name: api
                    path: /tmp/api-latest.tar

    push-ufit:
        needs: [build]
        name: Push Image (uFit)
        runs-on: ubuntu-latest
        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.UFIT_AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.UFIT_AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-central-1

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1

            -   name: Download artifact
                uses: actions/download-artifact@v2
                with:
                    name: api
                    path: /tmp

            -   name: Load image and push to Amazon ECR
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: api
                    IMAGE_TAG: latest
                run: |
                    docker load --input /tmp/api-latest.tar
                    docker image ls -a
                    docker tag api:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-ufit:
        needs: [push-ufit]
        name: Deploy (uFit)
        runs-on: ubuntu-latest

        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.UFIT_AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.UFIT_AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-central-1

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Deploy new image to ECS Service
                env:
                    CLUSTER: ufit
                    SERVICE: api-prod
                    REGION: eu-central-1
                run: |
                    aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment --region $REGION

    push-uvector:
        needs: [build]
        name: Push Image (uVector)
        runs-on: ubuntu-latest
        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.UVECTOR_AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.UVECTOR_AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-central-1

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1

            -   name: Download artifact
                uses: actions/download-artifact@v2
                with:
                    name: api
                    path: /tmp

            -   name: Load image and push to Amazon ECR
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: api
                    IMAGE_TAG: latest
                run: |
                    docker load --input /tmp/api-latest.tar
                    docker image ls -a
                    docker tag api:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-uvector:
        needs: [push-uvector]
        name: Deploy (uVector)
        runs-on: ubuntu-latest

        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.UVECTOR_AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.UVECTOR_AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-central-1

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Deploy new image to ECS Service
                env:
                    CLUSTER: uvector
                    SERVICE: api-prod
                    REGION: eu-central-1
                run: |
                    aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment --region $REGION
